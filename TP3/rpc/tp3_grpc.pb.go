// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: rpc/tp3.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Tp3RPCClient is the client API for Tp3RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Tp3RPCClient interface {
	Request(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*GrantedMessage, error)
	Release(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type tp3RPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTp3RPCClient(cc grpc.ClientConnInterface) Tp3RPCClient {
	return &tp3RPCClient{cc}
}

func (c *tp3RPCClient) Request(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*GrantedMessage, error) {
	out := new(GrantedMessage)
	err := c.cc.Invoke(ctx, "/Tp3Rpc.Tp3RPC/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tp3RPCClient) Release(ctx context.Context, in *ClientMessage, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, "/Tp3Rpc.Tp3RPC/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Tp3RPCServer is the server API for Tp3RPC service.
// All implementations must embed UnimplementedTp3RPCServer
// for forward compatibility
type Tp3RPCServer interface {
	Request(context.Context, *ClientMessage) (*GrantedMessage, error)
	Release(context.Context, *ClientMessage) (*ReleaseResponse, error)
	mustEmbedUnimplementedTp3RPCServer()
}

// UnimplementedTp3RPCServer must be embedded to have forward compatible implementations.
type UnimplementedTp3RPCServer struct {
}

func (UnimplementedTp3RPCServer) Request(context.Context, *ClientMessage) (*GrantedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedTp3RPCServer) Release(context.Context, *ClientMessage) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedTp3RPCServer) mustEmbedUnimplementedTp3RPCServer() {}

// UnsafeTp3RPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Tp3RPCServer will
// result in compilation errors.
type UnsafeTp3RPCServer interface {
	mustEmbedUnimplementedTp3RPCServer()
}

func RegisterTp3RPCServer(s grpc.ServiceRegistrar, srv Tp3RPCServer) {
	s.RegisterService(&Tp3RPC_ServiceDesc, srv)
}

func _Tp3RPC_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Tp3RPCServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tp3Rpc.Tp3RPC/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Tp3RPCServer).Request(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tp3RPC_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Tp3RPCServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tp3Rpc.Tp3RPC/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Tp3RPCServer).Release(ctx, req.(*ClientMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Tp3RPC_ServiceDesc is the grpc.ServiceDesc for Tp3RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tp3RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tp3Rpc.Tp3RPC",
	HandlerType: (*Tp3RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _Tp3RPC_Request_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _Tp3RPC_Release_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/tp3.proto",
}
